import os
import streamlit as st
import requests
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from dotenv import load_dotenv

# Chargement des variables d'environnement
load_dotenv()

# URL de l'API FastAPI
API_URL = os.getenv("API_URL")

# Configuration de la page
st.set_page_config(page_title="Dashboard Ventes", page_icon="üìä", layout="wide")
st.title("üìä Dashboard Ventes")

# Fonction pour charger les donn√©es globales
def load_global_data():
    with st.spinner("Chargement des donn√©es en cours..."):
        try:
            response = requests.get(f"{API_URL}getAllProductsKpis")
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            st.error(f"Erreur lors du chargement des donn√©es : {e}")
            return None

# Fonction pour afficher les KPIs globaux
def display_global_kpis(kpi_data):
    st.markdown("<hr>", unsafe_allow_html=True)
    with st.container():
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("üí∞ Revenu des Ventes finalis√©es", f"{kpi_data['total_won_revenue']:.2f} ‚Ç¨", help="Revenu des ventes en phase 'won' ")
        col2.metric("üí∏ Revenu des Ventes discussion ", f"{kpi_data['total_engaging_revenue']:.2f} ‚Ç¨", help="Revenu des ventes en phase 'engaging' ")
        col3.metric("üí° Revenu Moyen par Produit", f"{kpi_data['avg_revenue_per_product']:.2f} ‚Ç¨", help="Revenu moyen par produit")
        col4.metric("üíî Revenu des Ventes Perdues", f"{kpi_data['total_lost_revenue']:.2f} ‚Ç¨", help="Revenu des ventes perdues")

    st.markdown("<hr>", unsafe_allow_html=True)
    with st.container():
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("üéØ Nombre d'Opportunit√©s de vente √† Suivre", kpi_data["total_sales_prospecting"], help="Ventes en phase 'Prospecting'")
        col2.metric("üöÄ Nombre de ventes en discussion", kpi_data["total_sales_engaging"], help="Ventes en phase Engagement")
        col3.metric("üíî Nombre de ventes Annul√©es", kpi_data["total_sales_lost"], help="Ventes en phas 'lost'")
        col4.metric("üéâ Nombre de ventes finalis√©es", kpi_data["total_sales_won"], help="Ventes en phas 'won'")

    st.markdown("<hr>", unsafe_allow_html=True)
    with st.container():
        # Cr√©ation de 2 colonnes
        col1, col2 = st.columns([1, 3])  # R√©partition des colonnes avec un peu plus d'espace pour col2
        
        # Affichage du taux d'engagement
        col1.metric("üí° Taux d'Engagement", f"{kpi_data['engagement_rate'] * 100:.2f}%", help="Taux d'engagement entre les phases Prospecting et Engaging")
        
        # Logique pour donner un conseil bas√© sur le taux d'engagement
        if kpi_data['engagement_rate'] >= 0.5:
            # Affichage dans st.success pour un taux √©lev√©
            col2.success("""
                üéâ Bravo ! Votre taux d'engagement est √©lev√©. Cela signifie que vos actions de prospection et d'engagement g√©n√®rent un fort int√©r√™t. Continuez sur cette voie pour maintenir l'engagement des prospects.
            """)
        elif kpi_data['engagement_rate'] >= 0.2:
            # Affichage dans st.warning pour un taux mod√©r√©
            col2.warning("""
                ‚ö†Ô∏è Votre taux d'engagement est moyen. Cela peut indiquer un manque d'int√©r√™t ou de r√©activit√© de la part de vos prospects. Essayez d'ajuster vos actions pour les rendre plus attrayantes.
            """)
        else:
            # Affichage dans st.warning pour un taux faible
            col2.warning("""
                ‚ö†Ô∏è Attention, votre taux d'engagement est faible. Il est essentiel de revoir vos strat√©gies de prospection et d'engagement pour susciter davantage d'int√©r√™t aupr√®s de vos prospects.
            """)

    st.empty()

# Fonction pour afficher les graphiques globaux
def display_global_charts(kpi_data):
    st.html('<h3 style="color: #00ED9A;">R√©partition des Revenus(en ‚Ç¨) et du nombre de Ventes par Mois </h3>')

    if "revenue_per_month" in kpi_data and "sales_per_month" in kpi_data:
        revenue_month_data = pd.DataFrame({
            "Mois": list(kpi_data["revenue_per_month"].keys()),
            "Revenu Total": list(kpi_data["revenue_per_month"].values())
        })

        sales_month_data = pd.DataFrame({
            "Mois": list(kpi_data["sales_per_month"].keys()),
            "Ventes Totales": list(kpi_data["sales_per_month"].values())
        })

        col1, col2 = st.columns(2)

        with col1:
            fig_revenue_month = px.bar(revenue_month_data, x="Mois", y="Revenu Total",
                                       title="Revenus par Mois",
                                       color="Revenu Total", color_continuous_scale=px.colors.sequential.Plasma)
            fig_revenue_month.update_layout(template="plotly_dark", xaxis_title="Mois", yaxis_title="Revenu Total (‚Ç¨)")
            fig_revenue_month.update_yaxes(tickprefix="‚Ç¨", tickformat=".2f")
            st.plotly_chart(fig_revenue_month, use_container_width=True, key="revenue_month_chart")

        with col2:
            fig_sales_month = px.bar(sales_month_data, x="Mois", y="Ventes Totales",
                                     title="Nombre de Ventes par Mois",
                                     color="Ventes Totales", color_continuous_scale=px.colors.sequential.Viridis)
            fig_sales_month.update_layout(template="plotly_dark", xaxis_title="Mois", yaxis_title="Nombre de Ventes")
            st.plotly_chart(fig_sales_month, use_container_width=True, key="sales_month_chart")

    else:
        st.error("Les donn√©es des revenus et des ventes par mois ne sont pas disponibles.")

    st.html('<h3 style="color: #00ED9A;">Visualisation du nombre de produits vendus et des revenus par secteur.  </h3>')

    col1, col2 = st.columns(2)

    with col1:
        sector_data = pd.DataFrame({
            "Secteur": list(kpi_data["products_per_sector"].keys()),
            "Nombre de Produits": list(kpi_data["products_per_sector"].values()),
        })

        fig_sector = px.bar(sector_data, x="Secteur", y="Nombre de Produits", title="Nombre de produits vendus par secteur",
                            color="Secteur", color_continuous_scale='Viridis')
        fig_sector.update_layout(xaxis_title="Secteur", yaxis_title="Nombre de Produits",
                                template="plotly_dark", plot_bgcolor="#2b2b2b")
        st.plotly_chart(fig_sector, use_container_width=True, key="sector_chart")

    with col2:
        revenue_sector_data = pd.DataFrame({
            "Secteur": list(kpi_data["total_revenue_per_sector"].keys()),
            "Revenu Total": list(kpi_data["total_revenue_per_sector"].values()),
        })

        fig_revenue_sector = px.pie(revenue_sector_data, names="Secteur", values="Revenu Total",
                                    title="Revenus par Secteur(en ‚Ç¨)",
                                    color_discrete_sequence=px.colors.sequential.Plasma)
        fig_revenue_sector.update_layout(template="plotly_dark")
        st.plotly_chart(fig_revenue_sector, use_container_width=True, key="revenue_sector_chart")

# Fonction pour obtenir la liste des produits
def get_products():
    try:
        response = requests.get(f"{API_URL}/getAllProducts")
        response.raise_for_status()
        data = response.json()
        products = [product['fields']['product'] for product in data]
        return products
    except requests.RequestException as e:
        st.error(f"Erreur lors du chargement des produits : {e}")
        return []

# Fonction pour obtenir les KPIs d'un produit sp√©cifique
def get_product_kpis(product_name):
    try:
        response = requests.get(f"{API_URL}/getProductKpis/{product_name}")
        response.raise_for_status()
        data = response.json()
        if "message" in data:
            st.error(data["message"])
            return None
        return data
    except requests.RequestException as e:
        st.error(f"Erreur lors du chargement des donn√©es pour le produit '{product_name}': {e}")
        return None

# Fonction pour afficher les KPIs d'un produit sp√©cifique

def display_product_kpis(product_name):
    kpis = get_product_kpis(product_name)
    if kpis:
        st.title(f"Analyse des performances du produit : {kpis['product_name']}")
        
        # M√©triques principales
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Total des transactions", kpis['total_deals'])
        with col2:
            st.metric("Ventes finalis√©es", kpis['total_sales_won'])
        with col3:
            st.metric("Ventes perdues", kpis['total_sales_lost'])
        with col4:
            st.metric("Chiffre d'affaires total", f"{kpis['total_revenue']:,} ‚Ç¨")

        # Taux d'engagement et de r√©siliation
        st.subheader("Taux d'engagement et de r√©siliation")
        fig = go.Figure()
        fig.add_trace(go.Indicator(
            mode = "gauge+number",
            value = kpis['engagement_rate'],
            domain = {'x': [0, 0.5], 'y': [0, 1]},
            title = {'text': "Taux d'engagement"},
            gauge = {'axis': {'range': [None, 100]},
                     'bar': {'color': "darkblue"},
                     'steps' : [
                         {'range': [0, 30], 'color': "lightgray"},
                         {'range': [30, 70], 'color': "gray"},
                         {'range': [70, 100], 'color': "darkgray"}],
                     'threshold' : {'line': {'color': "red", 'width': 4}, 'thickness': 0.75, 'value': 90}}))
        fig.add_trace(go.Indicator(
            mode = "gauge+number",
            value = kpis['resignation_rate'],
            domain = {'x': [0.5, 1], 'y': [0, 1]},
            title = {'text': "Taux de r√©siliation"},
            gauge = {'axis': {'range': [None, 100]},
                     'bar': {'color': "darkred"},
                     'steps' : [
                         {'range': [0, 20], 'color': "lightgray"},
                         {'range': [20, 50], 'color': "gray"},
                         {'range': [50, 100], 'color': "darkgray"}],
                     'threshold' : {'line': {'color': "red", 'width': 4}, 'thickness': 0.75, 'value': 50}}))
        st.plotly_chart(fig)

        # Analyse des ventes
        st.subheader("Analyse des ventes")
        col1, col2 = st.columns(2)
        with col1:
            fig_funnel = go.Figure(go.Funnel(
                y = ['Total des transactions', 'Ventes totales', 'Ventes finalis√©es'],
                x = [kpis['total_deals'], kpis['total_sales'], kpis['total_sales_won']],
                textinfo = "value+percent initial"))
            fig_funnel.update_layout(title_text = "Entonnoir de ventes")
            st.plotly_chart(fig_funnel)
        
        with col2:
            labels = ['Ventes finalis√©es', 'Ventes perdues', 'En cours']
            values = [kpis['total_sales_won'], kpis['total_sales_lost'], 
                      kpis['total_deals'] - kpis['total_sales_won'] - kpis['total_sales_lost']]
            fig_pie = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])
            fig_pie.update_layout(title_text="R√©partition des ventes")
            st.plotly_chart(fig_pie)

        # Ventes par r√©gion
        st.subheader("Ventes par r√©gion")
        sales_by_region_df = pd.DataFrame(list(kpis['sales_by_region'].items()), columns=['Region', 'Ventes'])
        fig_region = px.bar(sales_by_region_df, x='Region', y='Ventes', 
                            title="Ventes par r√©gion",
                            color='Ventes',
                            color_continuous_scale=px.colors.sequential.Viridis)
        st.plotly_chart(fig_region)

        # Ventes par secteur
        st.subheader("Ventes par secteur")
        sales_by_sector_df = pd.DataFrame(list(kpis['sales_by_sector'].items()), columns=['Secteur', 'Ventes'])
        fig_sector = px.pie(sales_by_sector_df, names='Secteur', values='Ventes', 
                            title="R√©partition des ventes par secteur",
                            color_discrete_sequence=px.colors.qualitative.Set3)
        st.plotly_chart(fig_sector)

        # Analyse du chiffre d'affaires
        st.subheader("Analyse du chiffre d'affaires")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Chiffre d'affaires moyen par vente", f"{kpis['avg_revenue']:,} ‚Ç¨")
        with col2:
            st.metric("Chiffre d'affaires total", f"{kpis['total_revenue']:,} ‚Ç¨")

        # Recommandations
        st.subheader("Recommandations")
        if kpis['engagement_rate'] < 50:
            st.warning("Le taux d'engagement est faible. Envisagez d'am√©liorer vos strat√©gies de vente et de marketing pour augmenter l'int√©r√™t des clients potentiels.")
        if kpis['resignation_rate'] > 20:
            st.warning("Le taux de r√©siliation est √©lev√©. Concentrez-vous sur l'am√©lioration de la satisfaction client et la r√©tention.")
        if kpis['total_sales_lost'] / kpis['total_deals'] > 0.3:
            st.warning("Le taux de perte de ventes est √©lev√©. Analysez les raisons des √©checs de vente et ajustez votre approche en cons√©quence.")
        
        top_region = sales_by_region_df.loc[sales_by_region_df['Ventes'].idxmax(), 'Region']
        st.info(f"La r√©gion {top_region} montre les meilleures performances. Consid√©rez d'√©tendre vos efforts de vente dans cette r√©gion.")
        
        top_sector = sales_by_sector_df.loc[sales_by_sector_df['Ventes'].idxmax(), 'Secteur']
        st.info(f"Le secteur {top_sector} est le plus performant. Explorez des opportunit√©s pour d√©velopper davantage votre pr√©sence dans ce secteur.")

    else:
        st.error(f"Aucune donn√©e disponible pour le produit '{product_name}'.")


# Fonction principale
def main():
    # Obtention de la liste des produits
    products = get_products()
    
    if products:
        # Ajout d'une option par d√©faut au d√©but de la liste
        options = ["S√©lectionner un produit"] + products
        
        # Affichage d'un selectbox dans la sidebar avec une valeur par d√©faut
        selected_option = st.sidebar.selectbox("Vous pouvez analyser un seul produit", options)

        if selected_option == "S√©lectionner un produit":
            # Chargement et affichage des donn√©es globales
            kpi_data = load_global_data()
            if kpi_data:
                display_global_kpis(kpi_data)
                display_global_charts(kpi_data)
        else:
            # Affichage des KPIs du produit s√©lectionn√©
            display_product_kpis(selected_option)
    else:
        st.sidebar.error("Aucun produit disponible.")
        # Affichage des donn√©es globales si aucun produit n'est disponible
        kpi_data = load_global_data()
        if kpi_data:
            display_global_kpis(kpi_data)
            display_global_charts(kpi_data)

if __name__ == "__main__":
    main()

