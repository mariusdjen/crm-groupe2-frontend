import os
import streamlit as st
import requests
import pandas as pd
import plotly.express as px
from pprint import pprint
from dotenv import load_dotenv

#load doteenv
load_dotenv()
# URL de l'API FastAPI
API_URL = os.getenv("API_URL")
# Titre de la page
st.set_page_config(page_title="Dashboard Ventes", page_icon="üìä", layout="wide")
st.title("üìä Dashboard Ventes")

# Chargement des donn√©es
with st.spinner("Chargement des donn√©es en cours..."):
    try:
        response = requests.get(f"{API_URL}getAllProductsKpis")
        response.raise_for_status()
        kpi_data = response.json()
    except requests.RequestException as e:
        st.error(f"Erreur lors du chargement des donn√©es : {e}")
        st.stop()

# debut section1

# Affichage des KPIs principaux dans une disposition plus propre
st.markdown("<hr>", unsafe_allow_html=True)

with st.container():
    col1, col2, col3,col4 = st.columns(4)
    col1.metric("üí∞ Revenu des Ventes finalis√©es", f"{kpi_data['total_won_revenue']:.2f} ‚Ç¨", help="Revenu des ventes en phase 'won' ")
    col2.metric("üí∏ Revenu des Ventes discussion ", f"{kpi_data['total_engaging_revenue']:.2f} ‚Ç¨", help="Revenu des ventes en phase 'engaging' ")
    col3.metric("üí° Revenu Moyen par Produit", f"{kpi_data['avg_revenue_per_product']:.2f} ‚Ç¨", help="Revenu moyen par produit")
    col4.metric("üíî Revenu des Ventes Perdues", f"{kpi_data['total_lost_revenue']:.2f} ‚Ç¨", help="Revenu des ventes perdues")
# S√©parer les autres KPIs
st.markdown("<hr>", unsafe_allow_html=True)
with st.container():
    col1, col2, col3,col4= st.columns(4)
    col1.metric("üéØ Nombre d'Opportunit√©s de vente √† Suivre", kpi_data["total_sales_prospecting"], help="Ventes en phase 'Prospecting'")
    col2.metric("üöÄ Nombre de ventes en discussion", kpi_data["total_sales_engaging"], help="Ventes en phase Engagement")
    col3.metric("üíî Nombre de ventes Annul√©es", kpi_data["total_sales_lost"], help="Ventes en phas 'lost'")
    col4.metric("üéâ Nombre de ventes finalis√©es", kpi_data["total_sales_won"], help="Ventes en phas 'won'")

st.markdown("<hr>", unsafe_allow_html=True)
with st.container():
    # Cr√©ation de 2 colonnes
    col1, col2 = st.columns([1, 3])  # R√©partition des colonnes avec un peu plus d'espace pour col2
    
    # Affichage du taux d'engagement
    col1.metric("üí° Taux d'Engagement", f"{kpi_data['engagement_rate'] * 100:.2f}%", help="Taux d'engagement entre les phases Prospecting et Engaging")
    
    # Logique pour donner un conseil bas√© sur le taux d'engagement
    if kpi_data['engagement_rate'] >= 0.5:
        # Affichage dans st.success pour un taux √©lev√©
        col2.success("""
            üéâ Bravo ! Votre taux d'engagement est √©lev√©. Cela signifie que vos actions de prospection et d'engagement g√©n√®rent un fort int√©r√™t. Continuez sur cette voie pour maintenir l'engagement des prospects.
        """)
    elif kpi_data['engagement_rate'] >= 0.2:
        # Affichage dans st.warning pour un taux mod√©r√©
        col2.warning("""
            ‚ö†Ô∏è Votre taux d'engagement est moyen. Cela peut indiquer un manque d'int√©r√™t ou de r√©activit√© de la part de vos prospects. Essayez d'ajuster vos actions pour les rendre plus attrayantes.
        """)
    else:
        # Affichage dans st.warning pour un taux faible
        col2.warning("""
            ‚ö†Ô∏è Attention, votre taux d'engagement est faible. Il est essentiel de revoir vos strat√©gies de prospection et d'engagement pour susciter davantage d'int√©r√™t aupr√®s de vos prospects.
        """)




st.empty()


# 2. Visualisation des revenus par secteur et par mois
# Titre de la section
st.html('<h3 style="color: #00ED9A;">R√©partition  des Revenus(en ‚Ç¨) et du nombre de Ventes  par Mois </h3>')

# V√©rification que les donn√©es des revenus par mois sont pr√©sentes
if "revenue_per_month" in kpi_data and "sales_per_month" in kpi_data:
    # Cr√©ation du DataFrame pour les revenus par mois
    revenue_month_data = pd.DataFrame({
        "Mois": list(kpi_data["revenue_per_month"].keys()),
        "Revenu Total": list(kpi_data["revenue_per_month"].values())
    })

    # Cr√©ation du DataFrame pour les ventes par mois
    sales_month_data = pd.DataFrame({
        "Mois": list(kpi_data["sales_per_month"].keys()),
        "Ventes Totales": list(kpi_data["sales_per_month"].values())
    })

    # Utilisation de st.columns pour afficher les graphiques c√¥te √† c√¥te
    col1, col2 = st.columns(2)

    # Graphique des revenus par mois
    with col1:
        fig_revenue_month = px.bar(revenue_month_data, x="Mois", y="Revenu Total",
                                   title="Revenus par Mois",
                                   color="Revenu Total", color_continuous_scale=px.colors.sequential.Plasma)
        fig_revenue_month.update_layout(template="plotly_dark", xaxis_title="Mois", yaxis_title="Revenu Total (‚Ç¨)")
        fig_revenue_month.update_yaxes(tickprefix="‚Ç¨", tickformat=".2f")
        st.plotly_chart(fig_revenue_month, use_container_width=True, key="revenue_month_chart")

    # Graphique des ventes par mois
    with col2:
        fig_sales_month = px.bar(sales_month_data, x="Mois", y="Ventes Totales",
                                 title="Nombre de Ventes par Mois",
                                 color="Ventes Totales", color_continuous_scale=px.colors.sequential.Viridis)
        fig_sales_month.update_layout(template="plotly_dark", xaxis_title="Mois", yaxis_title="Nombre de Ventes")
        st.plotly_chart(fig_sales_month, use_container_width=True, key="sales_month_chart")

else:
    st.error("Les donn√©es des revenus et des ventes par mois ne sont pas disponibles.")









# 1. Visualisation des ventes par secteur et par mois
# Titre
st.html('<h3 style="color: #00ED9A;">Visualisation du nombre de produits vendus et des revenus par secteur.  </h3>')

# Cr√©er les colonnes pour mettre les graphiques c√¥te √† c√¥te
col1, col2 = st.columns(2)

with col1:

    # Cr√©er un DataFrame √† partir des donn√©es sur les produits par secteur
    sector_data = pd.DataFrame({
        "Secteur": list(kpi_data["products_per_sector"].keys()),
        "Nombre de Produits": list(kpi_data["products_per_sector"].values()),
    })

    # Cr√©ation du graphique en barres pour les ventes par secteur
    fig_sector = px.bar(sector_data, x="Secteur", y="Nombre de Produits", title="Nombre de produits vendus par secteur",
                        color="Secteur", color_continuous_scale='Viridis')
    fig_sector.update_layout(xaxis_title="Secteur", yaxis_title="Nombre de Produits",
                            template="plotly_dark", plot_bgcolor="#2b2b2b")
    st.plotly_chart(fig_sector, use_container_width=True, key="sector_chart")

with col2:

    # Cr√©er un DataFrame pour les revenus par secteur
    revenue_sector_data = pd.DataFrame({
        "Secteur": list(kpi_data["total_revenue_per_sector"].keys()),
        "Revenu Total": list(kpi_data["total_revenue_per_sector"].values()),
    })

    # Cr√©ation du graphique en camembert pour la r√©partition des revenus par secteur
    fig_revenue_sector = px.pie(revenue_sector_data, names="Secteur", values="Revenu Total",
                                title="Revenus par Secteur(en ‚Ç¨)",
                                color_discrete_sequence=px.colors.sequential.Plasma)
    fig_revenue_sector.update_layout(template="plotly_dark")
    st.plotly_chart(fig_revenue_sector, use_container_width=True, key="revenue_sector_chart")


# 3. Visualisation des ventes et revenus par statut
# Titre de la section
st.html('<h2 style="color: #00ED9A;">R√©partition des Ventes et Revenus par Statut de transaction</h2>')

# Cr√©ation du DataFrame pour les ventes par statut (Won, Prospecting, Engaging, Lost)
sales_status_data = pd.DataFrame({
    "Statut": ["Finalis√©es", "Prospection", "Engagement", "Perdues"],
    "Ventes": [kpi_data["total_sales_won"], kpi_data["total_sales_prospecting"], kpi_data["total_sales_engaging"], kpi_data["total_sales_lost"]],
})

# Graphique des ventes par statut
fig_sales_status = px.bar(sales_status_data, x="Statut", y="Ventes", title="Total des ventes par statut de la transaction",
                          color="Statut", color_discrete_sequence=px.colors.sequential.Viridis)
fig_sales_status.update_layout(xaxis_title="Statut", yaxis_title="Nombre de Ventes",
                               template="plotly_dark", plot_bgcolor="#2b2b2b")

# Cr√©ation du DataFrame pour les revenus par statut
revenue_status_data = pd.DataFrame({
    "Statut": ["Finalis√©es", "Prospection", "Engagement", "Perdues"],
    "Revenu Total": [kpi_data["total_won_revenue"], kpi_data["total_prospecting_revenue"],
                     kpi_data["total_engaging_revenue"], kpi_data["total_lost_revenue"]],
})

# Graphique des revenus par statut
fig_revenue_status = px.pie(revenue_status_data, names="Statut", values="Revenu Total",
                            title="Total des revenus par statut de transaction",
                            color_discrete_sequence=px.colors.sequential.Plasma)
fig_revenue_status.update_layout(template="plotly_dark")

# Utilisation de st.columns pour afficher les graphiques c√¥te √† c√¥te
col1, col2 = st.columns(2)

with col1:
    st.plotly_chart(fig_sales_status, use_container_width=True, key="sales_status_chart")

with col2:
    st.plotly_chart(fig_revenue_status, use_container_width=True, key="revenue_status_chart")



# debut section2

####


# Fonction pour obtenir la liste des produits
def get_products():
    try:
        response = requests.get(f"{API_URL}/getAllProducts")
        response.raise_for_status()
        data = response.json()
        
        # Extraire les noms des produits √† partir de la r√©ponse
        products = [product['fields']['product'] for product in data]
        return products
    
    except requests.RequestException as e:
        st.error(f"Erreur lors du chargement des produits : {e}")
        return []

# Fonction pour obtenir les KPIs d'un produit sp√©cifique
def get_product_kpis(product_name):
    try:
        response = requests.get(f"{API_URL}/getProductKpis/{product_name}")
        response.raise_for_status()
        data = response.json()
        
        if "message" in data:  # Si l'API retourne un message d'erreur
            st.error(data["message"])  # Afficher le message d'erreur
            return None
        
        return data

    except requests.RequestException as e:
        st.error(f"Erreur lors du chargement des donn√©es pour le produit '{product_name}': {e}")
        return None

# Fonction pour afficher les KPIs dans des cartes et des graphiques
def display_product_kpis(product_name):
    kpis = get_product_kpis(product_name)
    
    if kpis:
        st.subheader(f"KPI pour le produit : {product_name}")
        
        # Affichage des cartes pour les donn√©es simples
        col1, col2, col3 = st.columns(3)  # Trois colonnes pour les cartes
        
        # Style am√©lior√© pour les cartes
        card_style = """
            <div style="background-color:#2D3E50; border-radius:15px; padding:30px; color:white; text-align:center; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
                <h3>{}</h3>
                <h4>{}</h4>
            </div>
        """
        
        with col1:
            st.markdown(card_style.format("Ventes totales", kpis.get('total_sales', 'Non disponible')), unsafe_allow_html=True)
        
        with col2:
            st.markdown(card_style.format("Revenu total", f"${kpis.get('total_revenue', 'Non disponible'):,.2f}"), unsafe_allow_html=True)
        
        with col3:
            st.markdown(card_style.format("Taux d'engagement", f"{kpis.get('engagement_rate', 'Non disponible'):.2f}%"), unsafe_allow_html=True)

        # Affichage des graphiques pour les donn√©es par r√©gion et secteur
        
        if 'sales_by_region' in kpis:
            sales_by_region = kpis['sales_by_region']
            sales_by_region_df = pd.DataFrame(list(sales_by_region.items()), columns=['Region', 'Sales'])

            # Graphique des ventes par r√©gion
            fig_region = px.bar(sales_by_region_df, x='Region', y='Sales', 
                                title="Ventes par r√©gion", color='Region', 
                                color_discrete_sequence=px.colors.sequential.Plasma)
            st.plotly_chart(fig_region)
        
        if 'sales_by_sector' in kpis:
            sales_by_sector = kpis['sales_by_sector']
            sales_by_sector_df = pd.DataFrame(list(sales_by_sector.items()), columns=['Sector', 'Sales'])

            # Graphique des ventes par secteur
            fig_sector = px.bar(sales_by_sector_df, x='Sector', y='Sales', 
                                title="Ventes par secteur", color='Sector', 
                                color_discrete_sequence=px.colors.sequential.Viridis)
            st.plotly_chart(fig_sector)
        
    else:
        st.error(f"Aucune donn√©e disponible pour le produit '{product_name}'.")

# Interface Streamlit pour afficher la liste des produits et leur s√©lection dans la sidebar
st.title("Analyse des KPIs des Produits")

# Obtenir la liste des produits
products = get_products()

if products:
    # Ajouter une option par d√©faut au d√©but de la liste
    options = ["S√©lectionner un produit"] + products
    
    # Afficher un selectbox dans la sidebar avec une valeur par d√©faut
    selected_product = st.sidebar.selectbox("S√©lectionne un produit", options)

    if selected_product == "S√©lectionner un produit":
        # Afficher des KPI par d√©faut si aucun produit n'est s√©lectionn√©
        st.subheader("KPIs par d√©faut")
        
        col1, col2, col3 = st.columns(3)
        
        card_style = """
            <div style="background-color:#2D3E50; border-radius:15px; padding:30px; color:white; text-align:center; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
                <h3>{}</h3>
                <h4>{}</h4>
            </div>
        """
        
        with col1:
            st.markdown(card_style.format("Ventes totales", "0"), unsafe_allow_html=True)
        
        with col2:
            st.markdown(card_style.format("Revenu total", "$0.00"), unsafe_allow_html=True)
        
        with col3:
            st.markdown(card_style.format("Taux d'engagement", "0.00%"), unsafe_allow_html=True)
    else:
        # Afficher les KPIs du produit s√©lectionn√©
        display_product_kpis(selected_product)
else:
    st.error("Aucun produit disponible.")
